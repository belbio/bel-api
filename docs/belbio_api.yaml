openapi: 3.0.0

servers:
  - description: Production server V1
    url: https://api.bel.bio/v1

info:
  title: BELBio REST API
  description: |

    ## BEL Bio REST API

    [More BEL API documentation](http://bel-api.readthedocs.io/en/latest/), installation, etc

    ## Security

    This API can be secured via JSON Web Token passed
    in the Authorization header, but it is currently disabled. Since
    only GETs are allowed at this point, it does not appear necessary
    to restrict access.

    The terminology services and some utility API endpoints have been
    created at this point.  The BEL, Nanopubs and Edges endpoints
    are to be implemented in the future.

    **Note the Endpoints in the TODO section are only documented and
    not yet implemented**

  version: 0.3.2
  contact:
    name: whayes@adsworks.com
    url: https://bel.bio

security:
- JwtApiKey: []

tags:
- name: BEL
  description: BEL Language endpoints
- name: Terminologies
  description: Namespace and Annotation terminology endpoints
- name: Nanopubs
  description: Nanopub endpoints
- name: Edges
  description: Edge endpoints
- name: Utility
  description: Utility endpoints
- name: TODO
  description: These endpoints not implemented, only documented

paths:

  /bel/versions:
    get:
      summary: BEL Versions
      tags:
        - BEL
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /bel/{version}/specification:
    get:
      summary: BEL Specification
      tags:
        - BEL
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object

  /bel/{version}/completion/{text}:
    get:
      summary: BEL Assertion Completion
      description: |
        BEL completion will provide synactically and semantically valid suggestions for
        functions, namespace arguments (NSArgs) and string arguments (StrArg) if
        that StrArg is a default namespace type argument.

        ## Notes

        * Namespace value completions will only be returned after at least two characters
        are provided.

        * If a completion has both functions and namespaces, it can be up to 2X the
        size parameter as both returned completion lists are added together with
        the function completion list taking priority. The function list,
        given at least two characters for filtering, will be very small or empty.

        ## Examples:

        * completion_text="" - provide list of all primary functions for completion
        * ='p' - only provide functions starting with 'p'
        * ='p(' - provide fus() as the only completion since it is the only function that can be in position 1 of the proteinAbundance() function
        * ='p(AK' - no functions match so only namespace values will be returned
        * ='p(HGNC:AKT1)' cursor_loc=3  completion_text = 'HG' completions will be returned for all values that have the Protein entity type based on the p() function signature specification. HG will NOT be considered part of the namespace to limit to the HGNC namespace.
        * ='p(HGNC:AKT1)' cursor_loc=8 completion_text = 'AK' completions will use HGNC namespace and the entity type Protein to filter the results.
        * ='p(HGNC:AKT1) in' completion_text = 'in', relation replacement found will be 'increases'

        Note: Any forward slashes '/' in the completion text need to be replaced
          with _FORWARDSLASH_ otherwise it will get interpreted as
          another path component and will likely not match a valid
          url path (e.g. if gene_id="stupid/name" - this will look like
          /bel/{version}/completion/stupid/name and not match /bel/{version}/completion/{text} since there is
          an extra path component.
      tags:
        - BEL
      operationId: getBelCompletion
      parameters:
      - name: version
        in: path
        required: true
        description: BEL Version
        schema:
          type: string
      - name: text
        in: path
        required: true
        description: Completion text
        schema:
          type: string
      - name: cursor_loc
        in: query
        required: false
        description: |
          Cursor location in completion text. First char is 0. If not provided, it will default
          to the end of the string which is what is usually desired.
        schema:
          type: integer
      - name: bel_comp
        in: query
        required: false
        description: |
          Can be used to enhance validation. Values can be
          either 'subject', 'object' or 'full'.
        schema:
          type: string
      - name: bel_fmt
        in: query
        required: false
        description: |
          Used to select short, medium or long BEL formatting for
          BEL Completions. Defaults to medium.

          * short: short format for BEL Functions and Relations
          * medium: short format for BEL Functions and long format for Relations
          * long: long format for BEL Functions and Relations
        schema:
          type: string
          enum: [short, medium, long]
      - name: species_id
        in: query
        required: false
        description: |
          Species ID which can be used to filter possible completions. For example,
          if the part of the BEL Assertion to complete is a proteinAbundance function
          and the part to complete is the first argument of that function, the
          completions provided will be Proteins associated with the given species_id.
        schema:
          type: string
      - name: size
        in: query
        required: false
        description: How many completions to return, defaults to 10
        schema:
          type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BelCompletion'

        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /bel/{version}/validate/{statement}:
    get:
      summary: Validate
      description: |
        Validate BEL

        Note: Any forward slashes '/' in the subject|statement
          or object need to be replaced with _FORWARDSLASH_
          otherwise it will get interpreted as another path
          component and will likely not match a valid
          url path (e.g. if subject="p(GO:\"stupid/name\")" -
          this will add an extra path parameter by mistake by
          mis-interpreting the '/'.

      tags:
      - TODO
      operationId: getBelValidate
      parameters:
      - name: subject
        in: path
        required: true
        description: BEL Subject
        schema:
          type: string
      - name: relation
        in: path
        required: true
        description: BEL Relationship
        schema:
          type: string
      - name: object
        in: path
        required: true
        description: BEL Object
        schema:
          type: string
      - name: ast
        in: query
        required: false
        description: |
          If AST is requested, the abstract syntax tree of the
          BEL Edges will be provided in the response.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  bel:
                    type: object
                    properties:
                      subject:
                        type: string
                      relation:
                        type: string
                      object:
                        type: string
                  ast:
                    type: object
                    description: |
                      If AST is requested (by query param), provide
                      the AST along with the Edge subject, relation, and
                      objects.
                    additionalProperties:
                      type: object
                  messages:
                    type: array
                    items:
                      type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /bel/{version}/canonicalize/{bel_string}:
    get:
      summary: Canonicalize BEL
      description: |
        Canonicalize BEL

        Note: Any forward slashes '/' in the bel_string
          need to be replaced with _FORWARDSLASH_
          otherwise it will get interpreted as another path
          component and will likely not match a valid
          url path (e.g. if bel_string="p(GO:\"stupid/name\")" -
          this will add an extra path parameter by mistake by
          mis-interpreting the '/'.
      tags:
        - BEL
      operationId: getBelCanonicalize
      parameters:
      - name: bel_string
        in: path
        required: true
        description: BEL String
        schema:
          type: string
      - name: namespace_targets
        in: query
        required: false
        description: |
          string serialization of List[Map[str,List[str]]]
          e.g. [{"HGNC": ["EG", "SP"]}] to indicate HGNC should be canonicalized
          into the EG or SP namespace returning original term if no canonical form
          exists. Priority of namespace conversion is determined by the order of the
          target namespaces listed.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  canonicalized:
                    type: string
                  original:
                    type: string
                  messages:
                    type: array
                    items:
                      type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /bel/{version}/decanonicalize/{bel_string}:
    get:
      summary: Decanonicalize BEL
      description: |
        Decanonicalize BEL

        Note: Any forward slashes '/' in the bel_string
          need to be replaced with _FORWARDSLASH_
          otherwise it will get interpreted as another path
          component and will likely not match a valid
          url path (e.g. if subject="p(GO:\"stupid/name\")" -
          this will add an extra path parameter by mistake by
          mis-interpreting the '/'.
      tags:
      - BEL
      operationId: getBelDecanonicalize
      parameters:
      - name: bel_string
        in: path
        required: true
        description: BEL String
        schema:
          type: string
      - name: namespace_targets
        in: query
        required: false
        description: |
          string serialization of List[Map[str,List[str]]]
          e.g. [{"HGNC": ["EG", "SP"]}] to indicate HGNC should be canonicalized
          into the EG or SP namespace returning original term if no canonical form
          exists. Priority of namespace conversion is determined by the order of the
          target namespaces listed.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  decanonicalized:
                    type: string
                  original:
                    type: string
                  messages:
                    type: array
                    items:
                      type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /bel/{version}/orthologize/{species_id}/{bel_string}:
    get:
      summary: Orthologize BEL
      description: |
        Orthologize BEL

        These common species names can be used in place of the TAX:<id> form:
        - human (TAX:9606)
        - mouse (TAX:10090)
        - rat  (TAX:10116)
        - zebrafish (TAX:7955)

        Note: Any forward slashes '/' in the bel_string
          need to be replaced with _FORWARDSLASH_
          otherwise it will get interpreted as another path
          component and will likely not match a valid
          url path (e.g. if subject="p(GO:\"stupid/name\")" -
          this will add an extra path parameter by mistake by
          mis-interpreting the '/'.
      tags:
      - TODO
      operationId: getBelOrthologize
      parameters:
      - name: bel_string
        in: path
        required: true
        description: BEL String
        schema:
          type: string
      - name: species_id
        in: path
        required: true
        description: |
          Orthologize BEL into Species ID. Species ID is either TAX:<integer>
          format from the NCBI Taxonomy namespace or using the
          common labels:
            * human
            * mouse
            * rat
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  orthologized:
                    type: object
                    properties:
                      bel_string:
                        type: string
                  messages:
                    type: array
                    items:
                      type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /bel/{version}/edges/{bel_string}:
    get:
      summary: BEL Edges
      description: |
        Create BEL Edges

        The call will create BEL Edges from the BEL string which can
        be loaded into the edge store.

        Note: Any forward slashes '/' in the bel_string
          need to be replaced with _FORWARDSLASH_
          otherwise it will get interpreted as another path
          component and will likely not match a valid
          url path (e.g. if subject="p(GO:\"stupid/name\")" -
          this will add an extra path parameter by mistake by
          mis-interpreting the '/'.
      tags:
      - TODO
      operationId: getBelEdges
      parameters:
      - name: bel_string
        in: path
        required: true
        description: BEL String
        schema:
          type: string
      - name: computed_signatures
        in: query
        required: false
        description: |
          Default is to create all of the defined computed edges as
          specified in the BEL Language Specification file.

          You can specify which computed_signature steps will be performed
          by specifying a comma-delimited list of computed_signature
          keys. Example:

              computed_signatures=componentOf,degradation,activity
        schema:
          type: string
      - name: ast
        in: query
        required: false
        description: |
          If AST is requested, the abstract syntax tree of the
          BEL Edges will be provided in the response.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  edges:
                    type: array
                    items:
                      type: object
                      properties:
                        subject:
                          type: string
                        relation:
                          type: string
                        object:
                          type: string
                        ast:
                          type: object
                          description: |
                            If AST is requested (by query param), provide
                            the AST along with the Edge subject, relation, and
                            objects.
                          additionalProperties:
                            type: object
                  messages:
                    type: array
                    items:
                      type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /bel/{version}/editor/list:
    get:
      summary: Transform list of terms into BEL functions
      description: |
        Given list of terms, retrieve valid Namespaced term or message
        that original term in list was not found and wrap in given BEL function.

        This specific endpoint is for the BEL Editor Assertion bulk
        input field to allow inserting many BEL Objects or Subjects at once.

        An example would be given gene expression perturbation such as a drug,
        one could list the mRNA's increased due to the drug as BEL objects and
        wrap them in r() functions after validating them as known terms.
      tags:
        - TODO
      operationId: getBelEditorList
      parameters:
      - name: list
        required: true
        in: query
        description: URL encoded list of terms, each separated by a comma
        schema:
          type: string
      - name: function
        required: true
        in: query
        description: Wrap valid terms in this function
        schema:
          type: string
      - name: namespace
        in: query
        required: false
        description: Prefix terms in list with namespace before term validation
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: string
                      description: Valid namespaced term wrapped in given function, null if not found
                    term:
                      type: string
                      description: initial term given to be transformed
                    message:
                      type: string
                      description: Error or warning message associated with term, optional

  /nanopubs/validate:
    post:
      summary: Nanopub Validate
      description: Validate the nanopub structure, assertions and annotations
      tags:
        - Nanopubs
      operationId: validateNanopub
      requestBody:
        description: Submit Nanopub for validation
        required: true
        content:
          application/json:
            schema:
              required:
                - "nanopub"
              properties:
                error_level:
                  type: "string"
                  enum: [ERROR, WARNING]
                  default: WARNING
                  description: |
                    Default is WARNING which will also check to see if the namespace values are in the Namespace database
                    and whether they are the correct entity or annotation type.

                    ERROR will only check the nanopub structure and assertion syntax.
                nanopub:
                  required:
                    - "type"
                    - "assertions"
                    - "citation"
                  properties:
                    type:
                      required:
                        - "name"
                        - "version"
                      properties:
                        name:
                          type: "string"
                        version:
                          type: "string"
                      type: "object"
                    schema_uri:
                      type: "string"
                    assertions:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          object:
                            type: "string"
                          relation:
                            type: "string"
                          subject:
                            type: "string"
                    evidence:
                      type: "string"
                    annotations:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          type:
                            type: "string"
                          id:
                            type: "string"
                          label:
                            type: "string"
                    citation:
                      type: "object"
                    metadata:
                      type: "object"
                  type: "object"
            example:
              error_level: WARNING
              nanopub:
                type:
                  ame: BEL
                  version: 2.0.0
                schema_uri: http://json.schemastore.org/nanopub_bel-1.0.0.json
                assertions:
                - object: bo(GO:"lipid oxidation")
                  relation: positiveCorrelation
                  subject: path(MESH:therosclerosis
                evidence: Oxidation and nitration of macromolecules, such as proteins, DNA and lipids,
                  are prominent in atherosclerotic arteries.
                annotations:
                - type: Anatomy
                  id: MESH:artery
                  label: artery
                - type: Disease
                  id: DO:atherosclerosis
                  label: atherosclerosis
                - type: TextLocation
                  id: Review
                citation:
                  authors:
                  - de Nigris F
                  - Lerman A
                  - Ignarro LJ
                  - Williams-Ignarro S
                  - Sica V
                  - Baker AH
                  - Lerman LO
                  - Geng YJ
                  - Napoli C
                  comments: ''
                  date_published: ''
                  source_name: Trends in molecular medicine
                  database:
                    name: PubMed
                    id: '12928037'
                metadata:
                  stmt_group: Group 1

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    level:
                      type: string
                      enum: [Error, Warning]
                      default: WARNING
                    section:
                      type: string
                      enum: [Assertion, Annotation, Structure]
                    label:
                      type: string
                      description: Label which can be used in Elasticsearch faceting
                    index:
                      type: integer
                      description: Index of Assertion or Annotation in Nanopub so one can associate an error with a specific Assertion or Annotation
                    msg:
                      type: string
                example:
                  validation_results:
                  - level: Error
                    section: Structure
                    label: Error-Structure
                    msg: 'Missing or badly formed type - must have nanopub["type"] = {"name": <name>,
                      "version": <version}'
                    msg_html: 'Missing or badly formed type - must have nanopub["type"] = {"name": <name>,
                      "version": <version}'
                  - level: Error
                    section: Assertion
                    label: Error-Assertion
                    index: 0
                    msg: "Failed parse at position 25. Check that you have have closed your parenthesis\
                      \ correctly before this point.\npath(MESH:therosclerosis positiveCorrelation bo(GO:\"\
                      lipid oxidation\")\n                         ^"
                    msg_html: Failed parse at position 25. Check that you have have closed your parenthesis
                      correctly before this point.<br />path(MESH:therosclerosis positiveCorrelation
                      bo(GO:"lipid oxidation")<br />                         ^
                  - level: Warning
                    section: Annotation
                    index: 0
                    label: Warning-Annotation
                    msg: 'Annotation term: MESH:artery not found in database'
                    msg_html: 'Annotation term: MESH:artery not found in database'
                  - level: Warning
                    section: Annotation
                    index: 2
                    label: Warning-Annotation
                    msg: 'Annotation term: Review not found in database'
                    msg_html: 'Annotation term: Review not found in database'

        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /terms:
    get:
      summary: Terms
      description: Not implemented - will eventually provide term search functionality
      tags:
      - Terminologies
      operationId: getTerms
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /terms/{term_id}:
    get:
      summary: Get Term record
      description: |
        Get Term record, example term_id=HGNC:391
      tags:
      - Terminologies
      operationId: getTerm
      parameters:
      - name: term_id
        in: path
        required: true
        description: |
          Term ID (or alternate Term ID)

          Note: Any forward slashes '/' in term need to be replaced
            with _FORWARDSLASH_ otherwise it will get interpreted as
            another path component and will likely not match a valid
            url path (e.g. if term_id="stupid/name" - this will look like
            /terms/stupid/name and not match /terms/{term_id} since there is
            an extra path component.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
            statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /terms/completions/{completion_text}:
    get:
      summary: Term Completion
      description: |
        Get term completion suggestions filtered by species_id, entity_types
        annotation_types or namespaces.  You many use as many filters as desired.
        Each filter type must be present, but you can submit multiple
        entity_types, etc and the query must match 1 or more of the given
        entity_types but is not required to match all of them.

      tags:
      - Terminologies
      operationId: getTermCompletion
      parameters:
      - name: completion_text
        in: path
        required: true
        description: |
          Partial term to complete, example completion 'AKT'

          Note: Any forward slashes '/' in term need to be replaced
            with _FORWARDSLASH_ otherwise it will get interpreted as
            another path component and will likely not match a valid
            url path (e.g. if completion_text="stupid/name" - this will look like
            /terms/completions/stupid/name and not match /terms/completions/{completion_text} since there is
            an extra path component.
        schema:
          type: string
      - name: species_id
        required: false
        in: query
        description: |
          Species ID, will accept TAX:\<integer\>, human, mouse or rat

          Example query would be complete_term: AKT and species_id: TAX:9606 or human
        style: form
        schema:
          type: array
          items:
            type: string
      - name: entity_types
        required: false
        in: query
        description: |
          Entity Types will accept any of the values listed in the /term/types result.

          Example query would be complete_term: apop and entity_type: BiologicalProcess
        style: form
        schema:
          type: array
          items:
            type: string
      - name: annotation_types
        required: false
        in: query
        description: |
          Annotation Types will accept any of the values listed in the /term/types result.

          Example query would be complete_term: scler and annotation_type: Disease
        style: form
        schema:
          type: array
          items:
            type: string
      - name: namespaces
        required: false
        in: query
        description: |
          Namespaces will accept any of the namespace values listed in the /term/types result.

          Example query would be complete_term: scler and namespace: DO
        style: form
        schema:
          type: array
          items:
            type: string
      - name: size
        required: false
        in: query
        description: Number of completions to return
        schema:
          type: string
          default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermCompletion'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /terms/{term_id}/equivalents:
    get:
      summary: Term Equivalents
      description: Get Term equivalents, example term_id=HGNC:AKT1
      tags:
      - Terminologies
      operationId: getTermEquivalents
      parameters:
      - name: term_id
        in: path
        required: true
        description: |
          Term ID (or alternate Term ID)

          Note: Any forward slashes '/' in term need to be replaced
            with _FORWARDSLASH_ otherwise it will get interpreted as
            another path component and will likely not match a valid
            url path (e.g. if term_id="stupid/name" - this will look like
            /terms/stupid/name and not match /terms/{term_id} since there is
            an extra path component.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  EG: EG:207
                  UP: UP:P31749
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /terms/{term_id}/canonicalized:
    get:
      summary: Term Canonicalization
      description: |
        Canonicalize the term into the standard namespaces used in the
        EdgeStore. This is to keep duplicate edges from being introduced
        when equivalent BEL Entities but in different namespaces are
        used.

        If a canonical term cannot be found, the query term_id will be
        returned.

        An example term_id to use is HGNC:AKT1 which will result in EG:207
        being returned.
      tags:
      - Terminologies
      operationId: getTermCanonicalized
      parameters:
      - name: term_id
        in: path
        required: true
        description: |
          Term ID (or alternate Term ID)

          Note: Any forward slashes '/' in term need to be replaced
            with _FORWARDSLASH_ otherwise it will get interpreted as
            another path component and will likely not match a valid
            url path (e.g. if term_id="stupid/name" - this will look like
            /terms/stupid/name and not match /terms/{term_id} since there is
            an extra path component.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  term_id:
                    type: string
                example:
                  term_id: EG:207
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /terms/{term_id}/decanonicalized:
    get:
      summary: Term Decanonicalization
      description: |
        Decanonicalize the term into the human friendly namespaces.
        This is typically used when extracting a Term from an edge extracted
        from the EdgeStore.

        If a decanonical term cannot be found, the query term_id will be
        returned.

        An example term_id to use is EG:207 which will result in HGNC:AKT1
        being returned.
      tags:
      - Terminologies
      operationId: getTermDecanonicalized
      parameters:
      - name: term_id
        in: path
        required: true
        description: |
          Term ID (or alternate Term ID)

          Note: Any forward slashes '/' in term need to be replaced
            with _FORWARDSLASH_ otherwise it will get interpreted as
            another path component and will likely not match a valid
            url path (e.g. if term_id="stupid/name" - this will look like
            /terms/stupid/name and not match /terms/{term_id} since there is
            an extra path component.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  term_id:
                    type: string
                example:
                  term_id: HGNC:AKT1
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /terms/types:
    get:
      summary: Term Types
      description: |
        Get:
          * term namespaces and associated term counts
          * entity_types and associated term counts
          * context_types and associated term counts
      tags:
      - Terminologies
      - Utility
      operationId: getTermTypes
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  namespaces:
                    type: object
                    additionalProperties:
                      type: integer
                  entity_types:
                    type: object
                    additionalProperties:
                      type: integer
                  context_types:
                    type: object
                    additionalProperties:
                      type: integer
                example:
                  namespaces:
                    EG: 19725818
                    TAX: 1645046
                    SP: 555594
                    CHEBI: 115240
                    MGI: 56177
                    GO: 44979
                    RGD: 44972
                    HGNC: 41254
                    MESH: 18187
                    DO: 8507
                  entity_types:
                    Gene: 20423815
                    RNA: 20372645
                    Protein: 17852293
                    Abundance: 124989
                    Micro_RNA: 4320
                    BiologicalProcess: 2029
                    Location: 237
                  context_types:
                    Species: 1294116
                    Disease: 4860
                    Anatomy: 1506
                    Cell: 351
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'


  /orthologs/{gene_id}:
    get:
      summary: Orthologs for given gene
      description: |
        Get orthologs for given gene_id for all species

        Example query gene_id=HGNC:AKT1
        Result: MGI:AKT1, TAX:10090
                RGD:AKT1, TAX:10116
      tags:
      - Terminologies
      operationId: getOrthologs
      parameters:
      - name: gene_id
        in: path
        required: true
        description: |
          Gene or Protein ID

          Note: Any forward slashes '/' in term need to be replaced
            with _FORWARDSLASH_ otherwise it will get interpreted as
            another path component and will likely not match a valid
            url path (e.g. if gene_id="stupid/name" - this will look like
            /orthologs/stupid/name and not match /orthologs/{gene_id} since there is
            an extra path component.
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  orthologs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        species_id:
                          type: string
                example:
                  orthologs:
                    - id: MGI:Akt1
                      species_id: TAX:10090
                    - id: RGD:Akt1
                      species_id: TAX:10116
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /orthologs/{gene_id}/{species_id}:
    get:
      summary: Ortholog
      description: |
        Get ortholog for given gene_id from species_id

        Example query gene_id=HGNC:A1BG  species_id: TAX:10090
        Result: MGI:A1bg
      tags:
      - Terminologies
      operationId: getOrthologsSpeciesId
      parameters:
      - name: gene_id
        in: path
        required: true
        description: |
          Gene or Protein ID

          Note: Any forward slashes '/' in term need to be replaced
            with _FORWARDSLASH_ otherwise it will get interpreted as
            another path component and will likely not match a valid
            url path (e.g. if gene_id="stupid/name" - this will look like
            /orthologs/stupid/name and not match /orthologs/{gene_id} since there is
            an extra path component.
        schema:
          type: string
      - name: species_id
        in: path
        required: true
        description: Get orthologs with species_id for gene_id
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  orthologs:
                    type: array
                    items:
                      type: string
                example:
                  orthologs:
                    - MGI:A1bg
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'


  /text/pubmed:
    get:
      summary: Pubmed Info
      description: |
        Get Pubmed Info from NLM and Pubtator annotations to enhance the
        Pubmed information.
      tags:
        - Utility
      operationId: getPubmed
      parameters:
      - name: pmid
        in: path
        required: true
        description: Pubmed ID
        schema:
          type: integer
      - name: pubmed_only
        in: query
        required: false
        description: |
          Only retrieve Pubmed data and not Pubtator annotations.
          Pubmed responds in <100ms. Pubtator annotations may take
          several seconds.
        schema:
          type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pmid:
                    type: string
                  title:
                    type: string
                  abstract:
                    type: string
                  authors:
                    type: array
                    items:
                      type: string
                  pub_date:
                    type: string
                    description: ISOdate format YYYY-MM-DD or null if unknown
                  journal_title:
                    type: string
                  journal_iso_title:
                    type: string
                  doi:
                    type: string
                  compounds:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                  mesh:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                  annotations:
                    description: |
                      Pubtator BioConcept annotations against Pubmed Title and Abstract.
                      This is an object of multiple annotated terms using valid namespaces
                      with an object containing the spans it was extracted from
                      the text of the extracted string, the name and label of the
                      term and the entity and annotation types if available.
                    type: object
                    additionalProperties:
                      type: object
                    example:
                      "HGNC:ABCC1":
                        spans:
                          - begin: 315
                            end: 326
                            text: Multidrug resistance-associated protein 1
                          - begin: 299
                            end: 310
                            text: MRP-1
                        entity_types:
                          - Protein
                          - Gene
                          - RNA
                        annotations_types:
                          - null
                        name: ATP binding cassette subfamily C member 1
                        label: ABCC1

        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /simple_status:
    get:
      summary: Simple Status
      description: Simple unauthenticated status check of API
      tags:
      - Utility
      security: []
      operationId: getSimpleStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Simple unauthenticated status API endpoint works
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /status:
    get:
      summary: Status (authenticated)
      description: Authenticated response with API settings and database content statistics
      tags:
      - Utility
      operationId: getStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /healthcheck:
    get:
      summary: Service Healthcheck
      description: Simple unauthenticated health status check
      tags:
      - Utility
      security: []
      operationId: getHealthStatus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Simple unauthenticated health status API endpoint works
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /version:
    get:
      summary: Version
      description: Get version of API
      tags:
      - Utility
      security: []
      operationId: getVersion
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                example:
                  version: 0.1.2
components:
  schemas:

    Term:
      type: object
      properties:
        namespace:
          type: string
        src_id:
          type: string
        id:
          type: string
        alt_ids:
          type: array
          items:
            type: string
        label:
          type: string
        name:
          type: string
        species_id:
          type: string
        species_label:
          type: string
        description:
          type: string
        entity_types:
          type: array
          items:
            type: string
        context_types:
          type: array
          items:
            type: string
        equivalences:
          type: array
          items:
            type: string
        synonyms:
          type: array
          items:
            type: string
        children:
          type: array
          items:
            type: string
        obsolete_ids:
          type: array
          items:
            type: string
      example:
        namespace: HGNC
        src_id: '391'
        id: HGNC:AKT1
        alt_ids:
        - HGNC:391
        label: AKT1
        name: AKT serine/threonine kinase 1
        species_id: TAX:9606
        species_label: human
        description: ''
        entity_types:
        - Gene
        - RNA
        - Protein
        equivalences:
        - SP:P31749
        - EG:207
        synonyms:
        - RAC
        - PKB
        - PRKBA
        - AKT
        children: []
        obsolete_ids: []

    BelCompletion:
      type: object
      description: Completion object for BEL Assertions
      properties:
        completion_text:
          type: string
          description: Text to submit for completion
        completions:
          type: array
          items:
            type: object
            properties:
              replacement:
                type: string
                description: Replace the BEL input given with this if this completion is selected.
              cursor_loc:
                type: integer
                description: |
                  Provide a cursor location in the input field to select part of the
                  BEL assertion provided to complete on.
              label:
                type: string
                description: Human friendly label of what was found to use for the completion
              highlight:
                type: string
                description: |
                  Presents the matched text with \<em\>\</em\> tags wrapping the
                  completion text for the ID or synonym
                  found. The ID or synonym found will often not be the same as the
                  official Namespace ID inserted into the BEL assertion.
      example:
        completion_text: EGF
        completions:
        - replacement: p(SP:Q0D2K5
          cursor_loc: 11
          highlight: <em>EGFEM1P</em>
          label: EGFEM1P
        - replacement: p(EG:51162
          cursor_loc: 10
          highlight: <em>EGF</em> like domain multiple 7
          label: EGFL7

    TermCompletion:
      type: object
      description: Completion object for Terms
      properties:
        completion_text:
          type: string
          description: Text to submit for completion
        completions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Term ID with namespace prefix
              name:
                type: string
                description: official name of term
              label:
                type: string
                description: human friendly label for term
              description:
                type: string
              species:
                type: object
                properties:
                  id:
                    type: string
                  label:
                    type: string
              highlight:
                type: array
                items:
                  type: string
                description: |
                  List of ID's or synonyms with \<em\>\</em\> tags wrapping the
                  completion text that was matched.

      example:
        completion_text: AKT
        completions:
          - id: HGNC:AKT1
            name: AKT serine/threonine kinase 1
            label: AKT1
            description: ''
            species:
              id: TAX:9606
              label: human
            highlight:
            - <em>AKT1</em>
            - <em>AKT</em> serine/threonine kinase 1
            - <em>AKT</em>
          - id: HGNC:AKT1S1
            name: AKT1 substrate 1
            label: AKT1S1
            description: ''
            species:
              id: TAX:9606
              label: human
            highlight:
            - <em>AKT1S1</em>
            - <em>AKT1</em> substrate 1


    ErrorModel:
      type: object
      required:
      - title
      - message
      properties:
        title:
          type: string
        message:
          type: string
      example:
        title: Short descriptive title
        message: Longer error message with more details on what went wrong

  securitySchemes:
    JwtApiKey:
      description: |
        For accessing the API, a valid JWT token must be passed in the
        Authorization' header. The following syntax must be used for the value
        of the 'Authorization' header:\n  JWT xxxxxx.yyyyyyy.zzzzzz
      type: apiKey
      name: Authorization
      in: header

